Shortest Path Algorithms for Bus Stops in Vancouver The Vancouver public transit system offers a wide variety of bus routes that cover the majority of the city. However, there are often multiple routes that can be taken to reach the same destination. This can make finding the shortest path between two bus stops a difficult task. This REST API will allow users to input the starting and ending bus stop and receive the shortest path between the two stops. The API will use a variety of shortest path algorithms (Dijkstra’s) to find the shortest path between the two stops. The API will be built in Java and will use the Spring framework.


The MVC pattern is a well-known design pattern that divides an application into three separate layers: the model, the view, and the controller. The model layer is responsible for storing and retrieving data. In our case, the model will store information about the bus stops and the routes between them. The view layer is responsible for displaying data to the user. In our case, the view will display the shortest path between the two bus stops. The controller layer is responsible for handling user input and interacting with the model and view layers. In our case, the controller will receive user input (starting and ending bus stop) and will use the shortest path algorithms to find the shortest path between the two stops.


The ternary search algorithm is a well-known search algorithm that is often used to search for an element in an array. In our case, we will use the ternary search algorithm to search for a bus stop by name. The algorithm works by dividing the array into three parts: the left part, the middle part, and the right part. It then compares the element to be searched for with the element in the middle of the array. If the element to be searched for is less than the element in the middle, then the search continues in the left part of the array. If the element to be searched for is greater than the element in the middle, then the search continues in the right part of the array. If the element to be searched for is equal to the element in the middle, then the search is successful and the index of the element is returned. The time complexity of the ternary search algorithm is O(log n), where n is the size of the array.


Dijkstra’s algorithm is a well-known shortest path algorithm. It works by finding the shortest path from a starting node to all other nodes in the graph. The algorithm works by keeping track of the shortest path from the starting node to each other node in the graph. It does this by keeping track of the nodes that have been visited and the nodes that are still to be visited. The algorithm then calculates the shortest path to each node by considering the weights of the edges between the nodes. The time complexity of Dijkstra’s algorithm is O(n log n), where n is the number of nodes in the graph.


/shortestpath?origin=<origin stop>&destination=<destination stop> This endpoint will return the shortest path between the origin and destination stop. The origin and destination stop will be passed as parameters. /shortestpath?origin=<origin stop>&destination=<destination stop>&algorithm=<algorithm> This endpoint will return the shortest path between the origin and destination stop using the specified algorithm. The origin and destination stop will be passed as parameters. The algorithm will be passed as a parameter and can be one of the following: dijkstra, a*, or ternary.